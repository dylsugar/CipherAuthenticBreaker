This one was difficult. It took me 4 hrs just to get the right words for the plaintext. I first singled out the individual letters and deduced those to vowels. Like the first letter by itself could only be an "i" or an "a" conventionally speaking. The rest I had to just guess trial and error. On piazza, one of the students pointed out clif kid jbars/zbars, so I tested those. Once getting those, I was able to make words and confirm some mappings. However, most of the process also included guessing words that could potentially fit and if it complied with the confirmed mappings. So... after getting the mapping, my brain was completely racked, so I spent a while being confused of the order to put the mapping and how the indexes would relate alphabet a-z. The trick was that in order for the plaintext to show of the decrypted paragraph, each one of those letters correlated to its new updated letter. I thought that in order to find the password, I had to do the same exact thing, however, each iteration failed, so I was confused. But while messing around with the libraries, I figured out that the library or mapping had to fit to the encrypted alphabet instead of the decrypted one, so finally my for loop went through. I didn't do much optimization other than use the same DictionaryHelper method. This brute force required less iterations, so it was hard to think of other conditions that could optimize it.
